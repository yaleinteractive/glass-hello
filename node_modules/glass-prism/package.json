{
  "name": "glass-prism",
  "version": "0.1.0",
  "description": "Node.js framework for building Google Glass Mirror applications",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jaxbot/glass-prism"
  },
  "keywords": [
    "glass",
    "google",
    "prism",
    "google",
    "glass",
    "mirror",
    "api"
  ],
  "author": {
    "name": "Jonathan Warner"
  },
  "license": "MIT",
  "dependencies": {
    "googleapis": "~0.6.1",
    "dot": "~1.0.2"
  },
  "readme": "# Glass Prism\n\nA Node.js framework and boilerplate for Google Glass Mirror applications.\n\n## Getting started\n\n```\nnpm install glass-prism\n```\n\nCreate an application in the [Google API Console](https://console.developers.google.com/). [Here's a tutorial about that.](http://okaysass.com/posts/14-03-16-tutorial-node-js-mirror-api-google-glass)\n\nExample application:\n\n```\nvar prism = require(\"glass-prism\");\n\nprism.init({\n\t\"client_id\": \"3489342843-383i3euefwjkf.apps.googleusercontent.com\",\n\t\"client_secret\": \"kjsdlDKLJSSDLSDJsdkjsdkl\",\n\t\"redirect_dir\": \"http://localhost:8099/oauth2callback\"\n}, function() {\n\tconsole.log('Ready to roll!');\n\tprism.all.insertCard({ text: \"Hello, world!\" });\n});\n\nprism.on('newclient', function(tokens) {\n\tprism.insertCard({ html: prism.cards.main(\"Hi!\") }, tokens);\n});\n\n```\n\n## Cards\n\nPrism automatically compiles together card templates for your use.\nSimply place HTML cards in cards/, and they will be converted into a doT template function\nstored in prism.cards. For example:\n\n```\n<article>\n\t<section>\n\t\t<div class=\"text-auto-size\">\n\t\t\t<p>{{=it.config.hostname}}</p>\n\t\t\t<p>\n\t\t\t\t<span class='{{=it.cpuColor}}'>{{=it.avg}}</span>\n\t\t\t</p>\n\t\t\t<p class='{{=it.memColor}}'>{{=it.memused}}/{{=it.memtotal}}mb</p>\n\t\t</div>\n\t</section>\n\t<footer><div>{{=it.uptime}}</div></footer>\n</article>\n```\n\n```\nvar args = {\n\tuptime: 0,\n\tavg: 0,\n\tmemtotal: 0,\n\tmemused: 0,\n\tcpuColor: 'green',\n\tmemColor: 'green',\n\tconfig: config\n};\nvar html = prism.cards.main(args);\nprism.insertCard({ html: html }, tokens);\n```\n\nThe [Mirror API playground](https://developers.google.com/glass/tools-downloads/playground) is a great place to create HTML for your cards.\n\nMore information [about doT templates](http://olado.github.io/doT/index.html).\n\n## Configuration options\n\nThese are passed to the init function as a JSON object.\n\n```\n{\n\t/* required, obtain from the Google API console */\n\t\"client_id\": \"\",\n\t\"client_secret\": \"\",\n\t// should be set to point to this application's port and machine\n\t\"redirect_dir\": \"\",\n\n\t/* optional tweaking */\n\t// http interface. this is used to authorize via OAuth with the Google APIs\n\t\"port\": 8099,\n\n\t// default not set, can be a manual array of client tokens\n\t// if used, make sure refresh tokens are included!\n\t\"clientTokens\": null,\n\n\t// file that stores client tokens of users\n\t\"tokenFileName\": \".clienttokens.json\",\n\t// disable scanning for card templates\n\t\"noCardTemplates\": null,\n\t// disable the HTTP interface. If this is set, client tokens will need to be provided\n\t\"noHttpInterface\": null,\n\t// whether or not we care about subscribers\n\t\"subscribe\": null,\n\t// if set, a contact interface for -post an update to- is created\n\t\"displayName\": null,\n\n\t// if subscriptions are used, this string is used to confirm that Google sent the\n\t// subscription\n\t\"verify_hash\": null,\n\t\n\t// this is the actual URL Google sends a POST request to. This *must* be publicly\n\t// accessible over HTTPS (with valid SSL working).\n\t// If you only care about sending stuff to the device, you can ignore this safely.\n\t\"subscription_callback\": null,\n\t\n\t// the phonetic name for the contact\n\t\"speakableName\": null,\n\n\t// an icon for the endpoint, shown in the Glass post menu\n\t\"contactIcon\": null,\n\n\t// if set, nothing will be output to the console\n\t\"noOutputErrors\": null\n}\n```\n\nThe following events are emitted from the framework:\n\n`newclient` : a new client has connected. Passes `tokens` as the argument, an object containing the connect user's OAuth tokens\n\n`subscription` : a subscription from the Google API has been received. Occurs when a card is replied to, deleted, pinned, etc.\n\n## Methods and properties\n\n```\nfunction init(configinput, callback)\n```\n\nUsed to initialize the Prism interface and discover the Google API endpoints. Executes callback(err) when completed.\n\n```\ninsertCard(options, tokens, [callback])\n```\n\nInsert a card to the device authed with `token`, where `token` can be obtained from a [callback] or\nthe `client_tokens` property. `options` is the JSON object to send to the Mirror API. callback is sent (err, data).\n\n```\nupdateCard(options, tokens, [callback])\n```\n\nUpdate a card by sourceItemId. The card is first requested; if it does not exist, a new one is inserted. This is useful when you want to send information that will always be updated to the device. If `options.isPinned` is not set, it defaults to true, meaning new cards will always be inserted unless one is pinned. `tokens` and `callback` are the same as above.\n\n```\ndeleteBundle(options, tokens, [callback])\n```\n\nDeletes a bundle by `options.bundleId`\n\n```\ndeleteCard(options, tokens, [callback])\n```\n\nDeletes a card by id\n\n```\npatchCard(options, tokens, [callback])\n```\n\nUpdates a card by id\n\n```\nmirrorCall(call, tokens, callback)\n```\n\nPlaces a call to the Mirror API, authenticated with `token`. `call` is a function returned from `mirror`, which contains discovered functions, i.e.\n\n```\nmirrorCall(mirror.timeline.list({ \"sourceItemId\": options.sourceItemId,\n\t\t\"isPinned\": options.isPinned || true }), tokens, callback);\n```\n\n```\nclient_tokens\n```\n\nAn array of the client OAuth tokens.\n\n```\nall\n```\n\nAny of the above methods can be called with exports.all, which runs the command on *all* client tokens, and accepts (options, callback) as the arguments. E.g.:\n\n```\nprism.all.updateCard({ html: html, isPinned: true, sourceItemId: \"gtop_\"+config.hostname });\n```\n\n\n## Examples\n\nI built Prism so I could abstract out a lot of the code for my Mirror API projects, and as such have a few examples to share. More are welcome ;)\n\n[gtop](https://github.com/jaxbot/gtop) - Server monitor\n[Glass-Mint](https://github.com/jaxbot/glass-mint) - Mint.com banking information on Glass\n\n## License\nMIT\n\n## Shameless plug\n\nI do stuff with Google Glass, Node.js, and Vim plugins. [Follow me](https://github.com/jaxbot) if that sounds like something you're into (or you just want to make my day!)\n\n### Other Glass stuff\n\n[Google Glass development resources](http://jaxbot.me/glassdev)\n\n[My other Glass projects](https://github.com/search?q=%40jaxbot+glass)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jaxbot/glass-prism/issues"
  },
  "homepage": "https://github.com/jaxbot/glass-prism",
  "_id": "glass-prism@0.1.0",
  "_shasum": "ce299c08d706d6288d1285cc8187ec1936a36551",
  "_resolved": "git://github.com/jaxbot/glass-prism.git#69700c050bf9c8f38333fcbd625e81788d22a4cc",
  "_from": "glass-prism@git://github.com/jaxbot/glass-prism.git#69700c050bf9c8f38333fcbd625e81788d22a4cc"
}
